import java.util.ArrayList;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.TreeMap;
import java.util.Arrays;

public class Market {
	
	private static Scanner scnr;
	private static Map<String, Double> items = new TreeMap<>();
	private static Map<Integer, Map.Entry<String,Double>> menuSystem = new TreeMap<>();
	private static ArrayList<String> itemsOrdered = new ArrayList<>();
	private static ArrayList<Double> itemPrices = new ArrayList<>();
	private static ArrayList<Integer> itemQuantities = new ArrayList<>();
	

	public static void main(String[] args) {
		scnr = new Scanner(System.in);
		fillItemsMap();
		fillMenuSystemMap();
		printMenu();
		printMultiOrderInstructions();
		
		boolean repeatOrder = true;
		while (repeatOrder) {
			processUserOrder(userOrderChoice());
			repeatOrder = optionToContinueOrdering();
		}
		
		displayOrder();
		displayMinMaxOrdered();
		scnr.close();
		
		
		
	}
	
	
	
	
	
	
	private static void printMultiOrderInstructions() {
		System.out.println("To order multiples of the same item, type 'x' first.");
		System.out.println("E.g. 'x5 apples' or 'x12 3'.");
	}
	
	private static void displayMinMaxOrdered() {
		System.out.println("Most expensive item ordered: " + itemsOrdered.get(highestPriceIndex()) + " at " + itemPrices.get(highestPriceIndex()) + ".");
		System.out.println("Least expensive item ordered: " + itemsOrdered.get(lowestPriceIndex()) + " at " + itemPrices.get(lowestPriceIndex()) + ".");
	}
	
	private static double averageItemPrice() {
		double itemsTotal = 0.0;
		for (int i = 0; i < itemPrices.size(); i++) {
			itemsTotal += itemPrices.get(i);
		}
		return itemsTotal / itemPrices.size();
	}
	
	private static boolean optionToContinueOrdering() {
		System.out.print("\nWould you like to order anything else? y/n/menu/help ");
		String choice = scnr.next();//only takes the first word, repeats for second word if there is one
		if (choice.equalsIgnoreCase("y" )) {
			return true;
		} else if (choice.equalsIgnoreCase("n")) {
			return false;
		} else if (choice.equalsIgnoreCase("menu")) {
			printMenu();
			return optionToContinueOrdering();
		} else if (choice.equalsIgnoreCase("help")) {
			System.out.println("You can do this!");
			printMultiOrderInstructions();
			return (optionToContinueOrdering());
		} else {
			System.out.println("I don't understand.");
			return (optionToContinueOrdering());
		}
	}
	
	private static int lowestPriceIndex() {
		int index = -1;
		double min = 1000000000000.00;
		for (int i = 0; i < itemPrices.size(); i++) {
			if (min > itemPrices.get(i)) {
				min = itemPrices.get(i);
				index = i;
			}
		}
		return index;
	}
	
	private static int highestPriceIndex() {
		//of the items ordered, which has the highest price? return the first index of that item in itemsOrdered
		int index = -1;
		double max = 0;
		for (int i = 0; i < itemPrices.size(); i++) {
			if (max < itemPrices.get(i)) {
				max = itemPrices.get(i);
				index = i;
			}
		}
		return index;
	}
	
	private static void displayOrder() {
		System.out.println("\nThanks for your order!");
		System.out.println("Here's what you got:");
		String itemString = "";
		double itemPrice = 0.0;
		for (int i = 0; i < itemsOrdered.size(); i++) {
			itemString = itemsOrdered.get(i);
			itemPrice = itemPrices.get(i) * itemQuantities.get(i);
			System.out.printf("%-20s", itemString);
			System.out.printf("%-20s", itemPrice);
			System.out.println();
		}
		System.out.println("Average price per item in order was " + averageItemPrice() + ".");
	}
	
	private static void orderAdd(Entry<String, Double> entry) {
		if (itemsOrdered.indexOf(entry.getKey()) == -1) {
			itemsOrdered.add(entry.getKey());
			itemPrices.add(entry.getValue());
			itemQuantities.add(1);
		} else {
			int previousAmt = itemQuantities.get(itemsOrdered.indexOf(entry.getKey())); 
			itemQuantities.set(itemsOrdered.indexOf(entry.getKey()), previousAmt + 1);
		}
	}
	
	private static void processUserOrder(String str) {
		boolean validChoice = false;
		//if they use the item code
		if (isInteger(str)) {
			int itemCode = Integer.parseInt(str);
			String itemName = "";
			for (Map.Entry<Integer, Map.Entry<String, Double>> entry : menuSystem.entrySet()) {
				if (entry.getKey() == itemCode) {
					itemName = valueSplitter(entry, 1);
					for (Map.Entry<String, Double> entry2 : items.entrySet()) {
						if (itemName.equals(entry2.getKey())) {
							System.out.println("Adding " + entry2.getKey() + " to cart at " + entry2.getValue());
							orderAdd(entry2);
							validChoice = true;
							break;
						}
					}
					break;
				}
				
			}
		}
		//if they use the item name
		for (Map.Entry<String, Double> entry : items.entrySet()) {
			if (entry.getKey().equalsIgnoreCase(str)) {
				System.out.println("Adding " + entry.getKey() + " to cart at " + entry.getValue());
				orderAdd(entry);
				validChoice = true;
				break;
			}
		}
		
		if (!validChoice) {
			System.out.println("Sorry, we don't have those. Please try again.");
		}
		
	}
	
	private static boolean isInteger(String str) {
		try {
			Integer.parseInt(str);
			return true;
		} catch (NumberFormatException e) {
			return false;
		}
	}
	
	private static String userOrderChoice() {
		System.out.print("\nWhat item would you like to order? ");
		return scnr.next();
	}
	
	private static void printMenu() {
		System.out.println("Guenther's Market Menu");
		System.out.printf("%-10s", "code");
		System.out.printf("%-20s", "item");
		System.out.printf("%-20s", "price");
		System.out.print("\n===================================");
		for (Map.Entry<Integer, Map.Entry<String,Double>> entry : menuSystem.entrySet()) {
			System.out.println();
			System.out.printf("%-10s", entry.getKey());
			System.out.printf("%-20s", valueSplitter(entry, 1));
			System.out.printf("%5.2f", stringToDouble(valueSplitter(entry, 2)));
		}
		System.out.print("\n===================================");
		System.out.print("\n(To order, enter item code or name)");
		System.out.print("\n");
	}
	
	private static String valueSplitter(Map.Entry<Integer, Map.Entry<String, Double>> entry, int i) {
		String itemAndPrice = entry.getValue().toString();
		String[] menuStringSplit = new String[2];
		menuStringSplit = itemAndPrice.split("=");
		if (i == 1) {
			return menuStringSplit[0];
		} else if (i == 2) {
			return menuStringSplit[1];
		} else {
			return "";
		}
	}
	
	private static double stringToDouble(String str) {
		return Double.parseDouble(str);
	}
	
	private static void fillItemsMap() {
		items.put("Apple", .49);
		items.put("Banana", 10.00);
		items.put("Cherries", 2.99);
	}
	
	private static void fillMenuSystemMap() {
		int i = 1;
		for (Map.Entry<String,Double> entry : items.entrySet()) {
			menuSystem.put(i, entry);
			i++;
		}
	}
	
}